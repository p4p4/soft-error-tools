aig 1243 18 72 17 1153
1
1195
1199
1203
1207
1211
1215
1219
1223
1227
1231
1235
1239
1243
1247
1251
1255
1349
1
1449
1453
1457
1461
1465
1469
1473
1477
1481
1485
1489
1493
1497
1501
1505
1509
1607
1
2157
2161
2165
2169
2173
2177
2181
2185
2189
2193
2197
2201
2205
2209
2213
2217
2317
1
2417
2421
2425
2429
2433
2437
2441
2445
2449
2453
2457
2461
2465
2469
2473
2477
2487
184
190
196
202
208
214
220
226
232
238
244
250
256
262
268
274
981
EHIILOMPUQ	T[UX
aY\g]`madsehyilmpÖqtãuxëy|ó}ÄùÅ!Ñ £©#¨"Õœ“””÷Ÿ	›‡ÂÁ	ÍÒÒÙ
˝˚˛âÖàïèí°ôú≠£¶π≠∞≈∑∫—¡ƒ›ÀŒÈ’ÿıﬂ!‚ Å∫ºì#ñ"∑πºΩΩ¿√	« œ—	‘€€ﬁ
ÁÂËÛÔÚˇ˘¸ãÉÜóçê£óöØ°§ª´Æ«µ∏”ø¬ﬂ…!Ã Î∫º∆ûÒ#Ù"ïóöõõû°	•®≠Ø	≤ππº
≈√∆—Õ–›◊⁄È·‰ıÎÓÅı¯çˇÇôâå•ìñ±ù†Ωß!™ …∫º€#ﬁ"ˇ¥≥	≤∞≤∞≤∞≤∞≤∞≤∞≤∞≤∞≤∞≤∞≤∞≤∞≤∞≤∞Z\f≠Ú‚œ“⁄ˆË	“⁄€Ë¯Ù	ﬁÊÁˆ˙Ä	ÍÚÛÑ¸å	ˆ˛ˇí˛ò	Çäã†Ä§	éñóÆÇ∞	ö¢£ºÑº	¶ÆØ Ü»	≤∫ªÿà‘	æ∆«Êä‡	 “”ÙåÏ	÷ﬁﬂÇ	é¯	‚ÍÎê	êÑ	Óˆ˜û	íê“”“…‡ÃøÓ¬µ¸∏´äÆ°ò§ó¶öç¥êÉ¬Üy–|oﬁreÏh[˙^Qà	TGñ	J=§	@˝ÄÛıÎÌ„Â€›”’ÀÕ√≈ªΩ≥µ´≠£•õùìï∏
‡‹æ
¿
™úƒ
™¢»
§ÆÃ
	û∫–
ò∆‘
í“ÿ
åﬁ‹
ÜÍ‡
Äˆ‰
˙ÇË
ÙéÏ
Óö
Ë¶Ù
‚≤¯
‹æ¸
!÷ [»
^YŒ
\W‘
ZU⁄
XS‡
VQÊ
TOÏ
RMÚ
PK¯
NI˛
LGÑJEäHCêFAñD?úB=¢@ﬁéﬁﬁ‚‚ÊÊÍÍÓÓÚÚˆˆ˙˙˛˛ÇÇÜÜääééíí∫®
ñ¿·…Ê√Í∆»ö¥È∆Ì…ˆ√¸∆Ê∞∫$™
&‰Å	∆Ö	…é	√î	∆äŒ¿…
É	ô	∆ù	…¶	√¨	∆ÆÏ∆·
õ	±	∆µ	…æ	√ƒ	∆“äÃ˘
≥	…	∆Õ	…÷	√‹	∆ˆ®“ëÀ	·	∆Â	…Ó	√Ù	∆ö∆ÿ©„	˘	∆˝	…Ü
√å
∆æ‰ﬁ¡˚	ë
∆ï
…û
√§
∆‚Ç‰Ÿì
©
∆≠
…∂
√º
∆Ü†ÍÒ´
¡
∆≈
…Œ
√‘
∆™æâ√
Ÿ
∆›
…Ê
√Ï
∆Œ‹ˆ°€
Ò
∆ı
…˛
√Ñ∆Ú˙¸πÛ
â∆ç…ñ√ú∆ñòÇ—ã°∆•…Æ√¥∆∫∂àÈ£π∆Ω…∆√Ã∆ﬁ‘éï–ò˝ÏÄ›ê‡Ω¥¿ùÿ†˝¸Ä›†‡Ωƒ¿ùË†˝åÄ›∞‡Ω‘¿ù¯†}úÄ]¿`=‰@ø¬ü°ÅÉ„Â≈«ß©âãÎÌÕœØ±ëìÛı’◊∑πôõ˛òÍÑô‚™ü‚∞Í´‹º‰∑÷»ﬁ√–‘ÿœ ‡“€ƒÏÃÁæ¯∆Û∏Ñ¿ˇ≤ê∫ã¨ú¥ó¶®Æ£†¥®Øö¿¢ªîÃú«éÿ[é^Yî\WöZU†XS¶VQ¨TO≤RM∏PKæNIƒLG JE–HC÷FA‹D?‚B=Ë@Ÿ–à§Æi0 hold_signals<0>
i1 hold_signals<1>
i2 input_vector<0>
i3 input_vector<1>
i4 input_vector<2>
i5 input_vector<3>
i6 input_vector<4>
i7 input_vector<5>
i8 input_vector<6>
i9 input_vector<7>
i10 input_vector<8>
i11 input_vector<9>
i12 input_vector<10>
i13 input_vector<11>
i14 input_vector<12>
i15 input_vector<13>
i16 input_vector<14>
i17 input_vector<15>
l0 top|full_adder_nbit(1)|parity_protected_memory(2)|n69
l1 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<0>_out
l2 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<1>_out
l3 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<2>_out
l4 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<3>_out
l5 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<4>_out
l6 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<5>_out
l7 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<6>_out
l8 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<7>_out
l9 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<8>_out
l10 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<9>_out
l11 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<10>_out
l12 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<11>_out
l13 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<12>_out
l14 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<13>_out
l15 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<14>_out
l16 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<15>_out
l17 top|full_adder_nbit(1)|parity_protected_memory(2)|parity_reg_out
l18 top|full_adder_nbit(1)|parity_protected_memory(3)|n69
l19 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<0>_out
l20 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<1>_out
l21 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<2>_out
l22 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<3>_out
l23 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<4>_out
l24 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<5>_out
l25 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<6>_out
l26 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<7>_out
l27 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<8>_out
l28 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<9>_out
l29 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<10>_out
l30 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<11>_out
l31 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<12>_out
l32 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<13>_out
l33 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<14>_out
l34 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<15>_out
l35 top|full_adder_nbit(1)|parity_protected_memory(3)|parity_reg_out
l36 top|full_adder_nbit(4)|parity_protected_memory(5)|n69
l37 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<0>_out
l38 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<1>_out
l39 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<2>_out
l40 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<3>_out
l41 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<4>_out
l42 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<5>_out
l43 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<6>_out
l44 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<7>_out
l45 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<8>_out
l46 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<9>_out
l47 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<10>_out
l48 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<11>_out
l49 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<12>_out
l50 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<13>_out
l51 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<14>_out
l52 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<15>_out
l53 top|full_adder_nbit(4)|parity_protected_memory(5)|parity_reg_out
l54 top|full_adder_nbit(4)|parity_protected_memory(6)|n69
l55 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<0>_out
l56 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<1>_out
l57 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<2>_out
l58 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<3>_out
l59 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<4>_out
l60 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<5>_out
l61 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<6>_out
l62 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<7>_out
l63 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<8>_out
l64 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<9>_out
l65 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<10>_out
l66 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<11>_out
l67 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<12>_out
l68 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<13>_out
l69 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<14>_out
l70 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<15>_out
l71 top|full_adder_nbit(4)|parity_protected_memory(6)|parity_reg_out
o0 sum<0>
o1 sum<1>
o2 sum<2>
o3 sum<3>
o4 sum<4>
o5 sum<5>
o6 sum<6>
o7 sum<7>
o8 sum<8>
o9 sum<9>
o10 sum<10>
o11 sum<11>
o12 sum<12>
o13 sum<13>
o14 sum<14>
o15 sum<15>
o16 Err_out_Final
c
top 
This file was written by ABC on Fri Sep 16 17:38:46 2016
For information about AIGER format, refer to http://fmv.jku.at/aiger
The verilog file pipe_add_i16_l2.v has been converted using the following commands:
vl2mv pipe_add_i16_l2.v       # generates pipe_add_i16_l2.mv
abc -c "read_blif_mv pipe_add_i16_l2.mv; write_aiger -s pipe_add_i16_l2.aig"
pipe_add_i16_l2.v:
___________________________
// this file uses jinja templates for code generation, see http://jinja.pocoo.org
`define WORD_WIDTH 16  // the bit width of the input, adders, and output signals
`define LAYERS 2      // defines how often the adder is cascaded

module top(
    input_vector,   // the input vector, WORD_WIDTH broad
    hold_signals,
    sum,            // the final result, WORD_WIDTH broad
    clk,
    Err_out_Final   // the alarm output
    );
    
    input   clk;
    input   [`WORD_WIDTH-1:0] input_vector;
    input   [`LAYERS-1:0] hold_signals;
    output  [`WORD_WIDTH-1:0] sum;
    output  Err_out_Final;

    wire [`WORD_WIDTH-1:0] b_out_0 = input_vector;
    wire [`WORD_WIDTH-1:0] result_0 = input_vector;
    wire [`LAYERS-1:0] error_signals;

    // -- begin unrolled code --
{% for idx in range(1,`LAYERS+1) %}
    wire [`WORD_WIDTH-1:0] b_out_{{ idx }};
    wire [`WORD_WIDTH-1:0] result_{{ idx }};
    full_adder_nbit adder2(clk, result_{{idx - 1}}, b_out_{{idx - 1}}, result_{{idx}}, b_out_{{idx}}, hold_signals[{{idx - 1}}], error_signals[{{idx - 1}}]);
{% endfor %}
    // -- end unrolled code --

    checker myChecker(hold_signals, error_signals, Err_out_Final);


    assign sum = result_`LAYERS;

endmodule // top module


module full_adder_nbit(
    clk,
    in_a,
    in_b,
    sum,
    out_b,
    hold,
    not_valid
    );
    
    input   [`WORD_WIDTH-1:0] in_a;
    input   [`WORD_WIDTH-1:0] in_b;
    input clk;
    input hold;
    output [`WORD_WIDTH-1:0] sum;
    output [`WORD_WIDTH-1:0] out_b;
    output not_valid;
    
    wire [`WORD_WIDTH-1:0] res; 
    assign res = in_a + in_b;

    wire sum_latches_invalid;
    wire in_latches_invalid;
    parity_protected_memory result(clk, res, sum, hold, sum_latches_invalid);
    parity_protected_memory input_delay(clk, in_b, out_b, hold, in_latches_invalid);

    assign not_valid = in_latches_invalid | sum_latches_invalid;
endmodule // full_adder_nbit

module parity_protected_memory(clk, in, out, hold, not_valid);
    input clk;
    input  [`WORD_WIDTH-1:0] in;
    input hold;
    output [`WORD_WIDTH-1:0] out;
    output not_valid;

    reg [`WORD_WIDTH-1:0] memory;
    reg parity_reg;

    wire parity_in;
    wire parity_out;

    assign parity_in = in[0]{% for idx in range(1,`WORD_WIDTH) %} ^ in[{{idx}}]{% endfor %};
    assign parity_out = out[0]{% for idx in range(1,`WORD_WIDTH) %} ^ out[{{idx}}]{% endfor %};

    assign not_valid = parity_reg ^ parity_out;
    assign out = memory;

    initial begin
        memory = 1'b0;
        parity_reg = 0;
    end

    always @(posedge clk) begin
        if (~hold) begin
            memory = in;
            parity_reg = parity_in;
        end
    end
endmodule // parity_protected_memory


module checker(hold_signals, error_signals, alarm_output);
    input [`LAYERS-1:0] hold_signals;
    input [`LAYERS-1:0] error_signals;
    output alarm_output;


    // -- begin unrolled code --
{% for i1 in range(0,`LAYERS) %}
    // error in layer {{i1}}:
    wire err_in_L{{i1}} = error_signals[{{i1}}]{% if i1 is not equalto `LAYERS - 1%}  & ~hold_signals[{{i1+1}}] {% endif %};
{% endfor %}

    assign alarm_output = err_in_L0{% for i1 in range(1,`LAYERS) %} | err_in_L{{i1}}{% endfor %};
    // -- end unrolled code --

endmodule // checker


