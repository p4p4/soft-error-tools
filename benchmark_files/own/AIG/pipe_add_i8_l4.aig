aig 1311 12 80 9 1219
1
1123
1127
1131
1135
1139
1143
1147
1151
1197
1
1249
1253
1257
1261
1265
1269
1273
1277
1327
1
1589
1593
1597
1601
1605
1609
1613
1617
1669
1
1721
1725
1729
1733
1737
1741
1745
1749
1759
1
2021
2025
2029
2033
2037
2041
2045
2049
2101
1
2153
2157
2161
2165
2169
2173
2177
2181
2191
1
2453
2457
2461
2465
2469
2473
2477
2481
2533
1
2585
2589
2593
2597
2601
2605
2609
2613
2623
188
194
200
206
212
218
224
230
1021
%()),/-051	4;58
A9<G=@MADS©¨Ωø¬√√∆…	Õ–’◊	⁄··‰
ÌÎÓ˘ı¯ÖˇÇëZ\£¶∑πºΩΩ¿√	« œ—	‘€€ﬁ
ÁÂËÛÔÚˇ˘¸ãZ\f≤—‘ÂÁÍÎÎÓÒ	ı¯˝ˇ	Çââå
ïìñ°ù†≠ß™πZ\ÀŒﬂ·‰ÂÂËÎ	ÔÚ˜˘	¸ÉÉÜ
èçêõóöß°§≥Z\fÄ–˚˛èëîïïòõ	ü¢ß©	¨≥≥∂
øΩ¿À« ◊—‘„Z\ı¯âãéèèíï	ôú°£	¶≠≠∞
π∑∫≈¡ƒ—ÀŒ›Z\f–—•®πªæøø¬≈	…Ã—”	÷››‡
ÈÁÍıÒÙÅ˚˛çZ\ü¢≥àá	ÜÑÜÑÜÑÜÑÜÑÜÑ*,6û¶÷ÛˆÇ™‹	ˆ˛ˇê¨Ë	ÇäãûÆÙ	éñó¨∞Ä	ö¢£∫≤å	¶ÆØ»¥ò	≤∫ª÷∂§b˚bYà\OñRE§H;≤>1¿4'Œ*‹ mpce[]SUKMCE†	‘–¶	§	æ®		æˆ¨	∏Ç∞	≤é¥	¨ö∏	¶¶º	†≤¿	öæ+∞	.)∂	,'º	*%¬	(#»	&!Œ	$‘	"⁄	 Ú	˛Ú	Ú	ˆ	ˆ	˙	˙	˛	˛	Ç
Ç
Ü
Ü
¢
ºÍ®
’i⁄cﬁf∞
í§›f·iÍcfŒ
®™$æ&ÿıf˘iÇcàfÚ
¿∂›˜çfëiöc†fñÿ¬ıè•f©i≤c∏f∫Œç	ßΩf¡i c–fﬁà⁄•	ø’fŸi‚cËfÇ†ÊΩ	◊ÌfÒi˙cÄ	f¶∏Úı∏
¯›‘
‡Ω¯
¿ùú†}¿Ä]‰`=à@¨ ˇÇﬂ·¡√£•ÖágiIKˆ‹û¸îÌ∆	æîÛ∆	ƒéˇ¿	–àã∫	‹Çó¥	Ë¸
£Æ	Ùˆ
Ø®	Ä
ª¢	å+Ü.)å,'í*%ò(#û&!§$™"∞ çƒú
∏÷µ	i∫	cæ	fﬁÙΩ	f¡	i 	c–	f¸Ü˙$û
&∏	’	fŸ	i‚	cË	f†ûÜΩ
◊	Ì	fÒ	i˙	cÄ
fƒ∂í’
Ô	Ö
fâ
ií
cò
fËŒûÌ
á
ù
f°
i™
c∞
fåÊ™Öü
µ
fπ
i¬
c»
f∞˛∂ù∑
Õ
f—
i⁄
c‡
f‘ñ	¬ıÊ¯›Ç‡Ω¶¿ù †}ÓÄ]í`=∂@⁄ ˇÇﬂ·¡√£•ÖágiIK§∫
Ó™Ùª§éÙ¡§îÓÕû†ËŸò¨‚Âí∏‹Òåƒ÷˝Ü––âÄ‹+¥.)∫,'¿*%∆(#Ã&!“$ÿ"ﬁ Ìí˙àÑìiòcúfåﬁ¥õfüi®cÆf™Ù∫$¸&ñ≥f∑i¿c∆fŒí¿õµÀfœiÿcﬁfÚ∞∆≥Õ„fÁicˆfñŒÃÀÂ˚fˇiàcéf∫Ï“„˝ìfói†c¶fﬁäÿ˚ï´fØi∏cæfÇ®ﬁıî¯›∞‡Ω‘¿ù¯†}úÄ]¿`=‰@à ˇÇﬂ·¡√£•ÖágiIK“òæÿ“ãÇﬁ“ëÇ‰Ãù¸∆©ˆ¸¿µà∫¡Íî¥Õ‰†ÆŸﬁ¨+‚.)Ë,'Ó*%Ù(#˙&!Ä$Ü"å À‚ÿÿ≤i0 hold_signals<0>
i1 hold_signals<1>
i2 hold_signals<2>
i3 hold_signals<3>
i4 input_vector<0>
i5 input_vector<1>
i6 input_vector<2>
i7 input_vector<3>
i8 input_vector<4>
i9 input_vector<5>
i10 input_vector<6>
i11 input_vector<7>
l0 top|full_adder_nbit(1)|parity_protected_memory(2)|n37
l1 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<0>_out
l2 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<1>_out
l3 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<2>_out
l4 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<3>_out
l5 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<4>_out
l6 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<5>_out
l7 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<6>_out
l8 top|full_adder_nbit(1)|parity_protected_memory(2)|memory<7>_out
l9 top|full_adder_nbit(1)|parity_protected_memory(2)|parity_reg_out
l10 top|full_adder_nbit(1)|parity_protected_memory(3)|n37
l11 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<0>_out
l12 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<1>_out
l13 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<2>_out
l14 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<3>_out
l15 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<4>_out
l16 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<5>_out
l17 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<6>_out
l18 top|full_adder_nbit(1)|parity_protected_memory(3)|memory<7>_out
l19 top|full_adder_nbit(1)|parity_protected_memory(3)|parity_reg_out
l20 top|full_adder_nbit(4)|parity_protected_memory(5)|n37
l21 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<0>_out
l22 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<1>_out
l23 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<2>_out
l24 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<3>_out
l25 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<4>_out
l26 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<5>_out
l27 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<6>_out
l28 top|full_adder_nbit(4)|parity_protected_memory(5)|memory<7>_out
l29 top|full_adder_nbit(4)|parity_protected_memory(5)|parity_reg_out
l30 top|full_adder_nbit(4)|parity_protected_memory(6)|n37
l31 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<0>_out
l32 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<1>_out
l33 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<2>_out
l34 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<3>_out
l35 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<4>_out
l36 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<5>_out
l37 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<6>_out
l38 top|full_adder_nbit(4)|parity_protected_memory(6)|memory<7>_out
l39 top|full_adder_nbit(4)|parity_protected_memory(6)|parity_reg_out
l40 top|full_adder_nbit(7)|parity_protected_memory(8)|n37
l41 top|full_adder_nbit(7)|parity_protected_memory(8)|memory<0>_out
l42 top|full_adder_nbit(7)|parity_protected_memory(8)|memory<1>_out
l43 top|full_adder_nbit(7)|parity_protected_memory(8)|memory<2>_out
l44 top|full_adder_nbit(7)|parity_protected_memory(8)|memory<3>_out
l45 top|full_adder_nbit(7)|parity_protected_memory(8)|memory<4>_out
l46 top|full_adder_nbit(7)|parity_protected_memory(8)|memory<5>_out
l47 top|full_adder_nbit(7)|parity_protected_memory(8)|memory<6>_out
l48 top|full_adder_nbit(7)|parity_protected_memory(8)|memory<7>_out
l49 top|full_adder_nbit(7)|parity_protected_memory(8)|parity_reg_out
l50 top|full_adder_nbit(7)|parity_protected_memory(9)|n37
l51 top|full_adder_nbit(7)|parity_protected_memory(9)|memory<0>_out
l52 top|full_adder_nbit(7)|parity_protected_memory(9)|memory<1>_out
l53 top|full_adder_nbit(7)|parity_protected_memory(9)|memory<2>_out
l54 top|full_adder_nbit(7)|parity_protected_memory(9)|memory<3>_out
l55 top|full_adder_nbit(7)|parity_protected_memory(9)|memory<4>_out
l56 top|full_adder_nbit(7)|parity_protected_memory(9)|memory<5>_out
l57 top|full_adder_nbit(7)|parity_protected_memory(9)|memory<6>_out
l58 top|full_adder_nbit(7)|parity_protected_memory(9)|memory<7>_out
l59 top|full_adder_nbit(7)|parity_protected_memory(9)|parity_reg_out
l60 top|full_adder_nbit(10)|parity_protected_memory(11)|n37
l61 top|full_adder_nbit(10)|parity_protected_memory(11)|memory<0>_out
l62 top|full_adder_nbit(10)|parity_protected_memory(11)|memory<1>_out
l63 top|full_adder_nbit(10)|parity_protected_memory(11)|memory<2>_out
l64 top|full_adder_nbit(10)|parity_protected_memory(11)|memory<3>_out
l65 top|full_adder_nbit(10)|parity_protected_memory(11)|memory<4>_out
l66 top|full_adder_nbit(10)|parity_protected_memory(11)|memory<5>_out
l67 top|full_adder_nbit(10)|parity_protected_memory(11)|memory<6>_out
l68 top|full_adder_nbit(10)|parity_protected_memory(11)|memory<7>_out
l69 top|full_adder_nbit(10)|parity_protected_memory(11)|parity_reg_out
l70 top|full_adder_nbit(10)|parity_protected_memory(12)|n37
l71 top|full_adder_nbit(10)|parity_protected_memory(12)|memory<0>_out
l72 top|full_adder_nbit(10)|parity_protected_memory(12)|memory<1>_out
l73 top|full_adder_nbit(10)|parity_protected_memory(12)|memory<2>_out
l74 top|full_adder_nbit(10)|parity_protected_memory(12)|memory<3>_out
l75 top|full_adder_nbit(10)|parity_protected_memory(12)|memory<4>_out
l76 top|full_adder_nbit(10)|parity_protected_memory(12)|memory<5>_out
l77 top|full_adder_nbit(10)|parity_protected_memory(12)|memory<6>_out
l78 top|full_adder_nbit(10)|parity_protected_memory(12)|memory<7>_out
l79 top|full_adder_nbit(10)|parity_protected_memory(12)|parity_reg_out
o0 sum<0>
o1 sum<1>
o2 sum<2>
o3 sum<3>
o4 sum<4>
o5 sum<5>
o6 sum<6>
o7 sum<7>
o8 Err_out_Final
c
top 
This file was written by ABC on Fri Sep 16 17:38:46 2016
For information about AIGER format, refer to http://fmv.jku.at/aiger
The verilog file pipe_add_i8_l4.v has been converted using the following commands:
vl2mv pipe_add_i8_l4.v       # generates pipe_add_i8_l4.mv
abc -c "read_blif_mv pipe_add_i8_l4.mv; write_aiger -s pipe_add_i8_l4.aig"
pipe_add_i8_l4.v:
___________________________
// this file uses jinja templates for code generation, see http://jinja.pocoo.org
`define WORD_WIDTH 8  // the bit width of the input, adders, and output signals
`define LAYERS 4      // defines how often the adder is cascaded

module top(
    input_vector,   // the input vector, WORD_WIDTH broad
    hold_signals,
    sum,            // the final result, WORD_WIDTH broad
    clk,
    Err_out_Final   // the alarm output
    );
    
    input   clk;
    input   [`WORD_WIDTH-1:0] input_vector;
    input   [`LAYERS-1:0] hold_signals;
    output  [`WORD_WIDTH-1:0] sum;
    output  Err_out_Final;

    wire [`WORD_WIDTH-1:0] b_out_0 = input_vector;
    wire [`WORD_WIDTH-1:0] result_0 = input_vector;
    wire [`LAYERS-1:0] error_signals;

    // -- begin unrolled code --
{% for idx in range(1,`LAYERS+1) %}
    wire [`WORD_WIDTH-1:0] b_out_{{ idx }};
    wire [`WORD_WIDTH-1:0] result_{{ idx }};
    full_adder_nbit adder2(clk, result_{{idx - 1}}, b_out_{{idx - 1}}, result_{{idx}}, b_out_{{idx}}, hold_signals[{{idx - 1}}], error_signals[{{idx - 1}}]);
{% endfor %}
    // -- end unrolled code --

    checker myChecker(hold_signals, error_signals, Err_out_Final);


    assign sum = result_`LAYERS;

endmodule // top module


module full_adder_nbit(
    clk,
    in_a,
    in_b,
    sum,
    out_b,
    hold,
    not_valid
    );
    
    input   [`WORD_WIDTH-1:0] in_a;
    input   [`WORD_WIDTH-1:0] in_b;
    input clk;
    input hold;
    output [`WORD_WIDTH-1:0] sum;
    output [`WORD_WIDTH-1:0] out_b;
    output not_valid;
    
    wire [`WORD_WIDTH-1:0] res; 
    assign res = in_a + in_b;

    wire sum_latches_invalid;
    wire in_latches_invalid;
    parity_protected_memory result(clk, res, sum, hold, sum_latches_invalid);
    parity_protected_memory input_delay(clk, in_b, out_b, hold, in_latches_invalid);

    assign not_valid = in_latches_invalid | sum_latches_invalid;
endmodule // full_adder_nbit

module parity_protected_memory(clk, in, out, hold, not_valid);
    input clk;
    input  [`WORD_WIDTH-1:0] in;
    input hold;
    output [`WORD_WIDTH-1:0] out;
    output not_valid;

    reg [`WORD_WIDTH-1:0] memory;
    reg parity_reg;

    wire parity_in;
    wire parity_out;

    assign parity_in = in[0]{% for idx in range(1,`WORD_WIDTH) %} ^ in[{{idx}}]{% endfor %};
    assign parity_out = out[0]{% for idx in range(1,`WORD_WIDTH) %} ^ out[{{idx}}]{% endfor %};

    assign not_valid = parity_reg ^ parity_out;
    assign out = memory;

    initial begin
        memory = 1'b0;
        parity_reg = 0;
    end

    always @(posedge clk) begin
        if (~hold) begin
            memory = in;
            parity_reg = parity_in;
        end
    end
endmodule // parity_protected_memory


module checker(hold_signals, error_signals, alarm_output);
    input [`LAYERS-1:0] hold_signals;
    input [`LAYERS-1:0] error_signals;
    output alarm_output;


    // -- begin unrolled code --
{% for i1 in range(0,`LAYERS) %}
    // error in layer {{i1}}:
    wire err_in_L{{i1}} = error_signals[{{i1}}]{% if i1 is not equalto `LAYERS - 1%}  & ~hold_signals[{{i1+1}}] {% endif %};
{% endfor %}

    assign alarm_output = err_in_L0{% for i1 in range(1,`LAYERS) %} | err_in_L{{i1}}{% endfor %};
    // -- end unrolled code --

endmodule // checker


