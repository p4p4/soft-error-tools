aig 930 2 180 3 748
1
0
403
1
2
4
1
0
403
1
2
4
1
0
403
1
2
4
1
421
457
1
412
432
1
475
511
1
466
486
1
529
565
1
520
540
1
583
619
1
574
594
1
637
673
1
628
648
1
691
727
1
682
702
1
745
781
1
736
756
1
799
835
1
790
810
1
853
889
1
844
864
1
907
943
1
898
918
1
961
997
1
952
972
1
1015
1051
1
1006
1026
1
1069
1105
1
1060
1080
1
1123
1159
1
1114
1134
1
1177
1213
1
1168
1188
1
1231
1267
1
1222
1242
1
1285
1321
1
1276
1296
1
1339
1375
1
1330
1350
1
1393
1429
1
1384
1404
1
1447
1483
1
1438
1458
1
1501
1537
1
1492
1512
1
1555
1591
1
1546
1566
1
1609
1645
1
1600
1620
1
1663
1699
1
1654
1674
1
1717
1753
1
1708
1728
1
1771
1807
1
1762
1782
1
1825
1861
1
1816
1836
0
381
397
"0&âåãéèãéè	
ù†£ù†£	µ∏πµ∏π	
« Õ« Õ	ﬂ‚„ﬂ‚„	
ÒÙ˜ÒÙ˜	âåçâåç	
õû°õû°	≥∂∑≥∂∑	
≈»À≈»À	›‡·›‡·	
ÔÚıÔÚı	áäãáäã	
ôúüôúü	±¥µ±¥µ	
√∆…√∆…	€ﬁﬂ€ﬁﬂ	
ÌÛÌÛ	ÖàâÖàâ	
óöùóöù	Ø≤≥Ø≤≥	
¡ƒ«¡ƒ«	Ÿ‹›Ÿ‹›	
ÎÓÒÎÓÒ	ÉÜáÉÜá	
ïòõïòõ	≠∞±≠∞±	
ø¬≈ø¬≈	◊⁄€◊⁄€	
ÈÏÔÈÏÔ	ÅÑÖÅÑÖ	
ìñôìñô	´ÆØ´ÆØ	
Ω¿√Ω¿√	’ÿŸ’ÿŸ	
ÁÍÌÁÍÌ	ˇÇ	É	ˇÇ	É		
ë	î	ó	ë	î	ó		©	¨	≠	©	¨	≠		
ª	æ	¡	ª	æ	¡		”	÷	◊	”	÷	◊		
Â	Ë	Î	Â	Ë	Î		˝	Ä
Å
˝	Ä
Å
	
è
í
ï
è
í
ï
	ß
™
´
ß
™
´
	
π
º
ø
π
º
ø
	—
‘
’
—
‘
’
	
„
Ê
È
„
Ê
È
	˚
˛
ˇ
˚
˛
ˇ
	
çêìçêì	•®©•®©	
∑∫Ω∑∫Ω	œ“”œ“”	
·‰Á·‰Á	i0 input_vector<0>
i1 input_vector<1>
l0 top|full_adder_nbit(1)|d_ff(2)|n9
l1 top|full_adder_nbit(1)|d_ff(2)|memory<0>_out
l2 top|full_adder_nbit(1)|d_ff(2)|memory<1>_out
l3 top|full_adder_nbit(1)|d_ff(3)|n9
l4 top|full_adder_nbit(1)|d_ff(3)|memory<0>_out
l5 top|full_adder_nbit(1)|d_ff(3)|memory<1>_out
l6 top|full_adder_nbit(4)|d_ff(5)|n9
l7 top|full_adder_nbit(4)|d_ff(5)|memory<0>_out
l8 top|full_adder_nbit(4)|d_ff(5)|memory<1>_out
l9 top|full_adder_nbit(4)|d_ff(6)|n9
l10 top|full_adder_nbit(4)|d_ff(6)|memory<0>_out
l11 top|full_adder_nbit(4)|d_ff(6)|memory<1>_out
l12 top|full_adder_nbit(7)|d_ff(8)|n9
l13 top|full_adder_nbit(7)|d_ff(8)|memory<0>_out
l14 top|full_adder_nbit(7)|d_ff(8)|memory<1>_out
l15 top|full_adder_nbit(7)|d_ff(9)|n9
l16 top|full_adder_nbit(7)|d_ff(9)|memory<0>_out
l17 top|full_adder_nbit(7)|d_ff(9)|memory<1>_out
l18 top|full_adder_nbit(10)|d_ff(11)|n9
l19 top|full_adder_nbit(10)|d_ff(11)|memory<0>_out
l20 top|full_adder_nbit(10)|d_ff(11)|memory<1>_out
l21 top|full_adder_nbit(10)|d_ff(12)|n9
l22 top|full_adder_nbit(10)|d_ff(12)|memory<0>_out
l23 top|full_adder_nbit(10)|d_ff(12)|memory<1>_out
l24 top|full_adder_nbit(13)|d_ff(14)|n9
l25 top|full_adder_nbit(13)|d_ff(14)|memory<0>_out
l26 top|full_adder_nbit(13)|d_ff(14)|memory<1>_out
l27 top|full_adder_nbit(13)|d_ff(15)|n9
l28 top|full_adder_nbit(13)|d_ff(15)|memory<0>_out
l29 top|full_adder_nbit(13)|d_ff(15)|memory<1>_out
l30 top|full_adder_nbit(16)|d_ff(17)|n9
l31 top|full_adder_nbit(16)|d_ff(17)|memory<0>_out
l32 top|full_adder_nbit(16)|d_ff(17)|memory<1>_out
l33 top|full_adder_nbit(16)|d_ff(18)|n9
l34 top|full_adder_nbit(16)|d_ff(18)|memory<0>_out
l35 top|full_adder_nbit(16)|d_ff(18)|memory<1>_out
l36 top|full_adder_nbit(19)|d_ff(20)|n9
l37 top|full_adder_nbit(19)|d_ff(20)|memory<0>_out
l38 top|full_adder_nbit(19)|d_ff(20)|memory<1>_out
l39 top|full_adder_nbit(19)|d_ff(21)|n9
l40 top|full_adder_nbit(19)|d_ff(21)|memory<0>_out
l41 top|full_adder_nbit(19)|d_ff(21)|memory<1>_out
l42 top|full_adder_nbit(22)|d_ff(23)|n9
l43 top|full_adder_nbit(22)|d_ff(23)|memory<0>_out
l44 top|full_adder_nbit(22)|d_ff(23)|memory<1>_out
l45 top|full_adder_nbit(22)|d_ff(24)|n9
l46 top|full_adder_nbit(22)|d_ff(24)|memory<0>_out
l47 top|full_adder_nbit(22)|d_ff(24)|memory<1>_out
l48 top|full_adder_nbit(25)|d_ff(26)|n9
l49 top|full_adder_nbit(25)|d_ff(26)|memory<0>_out
l50 top|full_adder_nbit(25)|d_ff(26)|memory<1>_out
l51 top|full_adder_nbit(25)|d_ff(27)|n9
l52 top|full_adder_nbit(25)|d_ff(27)|memory<0>_out
l53 top|full_adder_nbit(25)|d_ff(27)|memory<1>_out
l54 top|full_adder_nbit(28)|d_ff(29)|n9
l55 top|full_adder_nbit(28)|d_ff(29)|memory<0>_out
l56 top|full_adder_nbit(28)|d_ff(29)|memory<1>_out
l57 top|full_adder_nbit(28)|d_ff(30)|n9
l58 top|full_adder_nbit(28)|d_ff(30)|memory<0>_out
l59 top|full_adder_nbit(28)|d_ff(30)|memory<1>_out
l60 top|full_adder_nbit(31)|d_ff(32)|n9
l61 top|full_adder_nbit(31)|d_ff(32)|memory<0>_out
l62 top|full_adder_nbit(31)|d_ff(32)|memory<1>_out
l63 top|full_adder_nbit(31)|d_ff(33)|n9
l64 top|full_adder_nbit(31)|d_ff(33)|memory<0>_out
l65 top|full_adder_nbit(31)|d_ff(33)|memory<1>_out
l66 top|full_adder_nbit(34)|d_ff(35)|n9
l67 top|full_adder_nbit(34)|d_ff(35)|memory<0>_out
l68 top|full_adder_nbit(34)|d_ff(35)|memory<1>_out
l69 top|full_adder_nbit(34)|d_ff(36)|n9
l70 top|full_adder_nbit(34)|d_ff(36)|memory<0>_out
l71 top|full_adder_nbit(34)|d_ff(36)|memory<1>_out
l72 top|full_adder_nbit(37)|d_ff(38)|n9
l73 top|full_adder_nbit(37)|d_ff(38)|memory<0>_out
l74 top|full_adder_nbit(37)|d_ff(38)|memory<1>_out
l75 top|full_adder_nbit(37)|d_ff(39)|n9
l76 top|full_adder_nbit(37)|d_ff(39)|memory<0>_out
l77 top|full_adder_nbit(37)|d_ff(39)|memory<1>_out
l78 top|full_adder_nbit(40)|d_ff(41)|n9
l79 top|full_adder_nbit(40)|d_ff(41)|memory<0>_out
l80 top|full_adder_nbit(40)|d_ff(41)|memory<1>_out
l81 top|full_adder_nbit(40)|d_ff(42)|n9
l82 top|full_adder_nbit(40)|d_ff(42)|memory<0>_out
l83 top|full_adder_nbit(40)|d_ff(42)|memory<1>_out
l84 top|full_adder_nbit(43)|d_ff(44)|n9
l85 top|full_adder_nbit(43)|d_ff(44)|memory<0>_out
l86 top|full_adder_nbit(43)|d_ff(44)|memory<1>_out
l87 top|full_adder_nbit(43)|d_ff(45)|n9
l88 top|full_adder_nbit(43)|d_ff(45)|memory<0>_out
l89 top|full_adder_nbit(43)|d_ff(45)|memory<1>_out
l90 top|full_adder_nbit(46)|d_ff(47)|n9
l91 top|full_adder_nbit(46)|d_ff(47)|memory<0>_out
l92 top|full_adder_nbit(46)|d_ff(47)|memory<1>_out
l93 top|full_adder_nbit(46)|d_ff(48)|n9
l94 top|full_adder_nbit(46)|d_ff(48)|memory<0>_out
l95 top|full_adder_nbit(46)|d_ff(48)|memory<1>_out
l96 top|full_adder_nbit(49)|d_ff(50)|n9
l97 top|full_adder_nbit(49)|d_ff(50)|memory<0>_out
l98 top|full_adder_nbit(49)|d_ff(50)|memory<1>_out
l99 top|full_adder_nbit(49)|d_ff(51)|n9
l100 top|full_adder_nbit(49)|d_ff(51)|memory<0>_out
l101 top|full_adder_nbit(49)|d_ff(51)|memory<1>_out
l102 top|full_adder_nbit(52)|d_ff(53)|n9
l103 top|full_adder_nbit(52)|d_ff(53)|memory<0>_out
l104 top|full_adder_nbit(52)|d_ff(53)|memory<1>_out
l105 top|full_adder_nbit(52)|d_ff(54)|n9
l106 top|full_adder_nbit(52)|d_ff(54)|memory<0>_out
l107 top|full_adder_nbit(52)|d_ff(54)|memory<1>_out
l108 top|full_adder_nbit(55)|d_ff(56)|n9
l109 top|full_adder_nbit(55)|d_ff(56)|memory<0>_out
l110 top|full_adder_nbit(55)|d_ff(56)|memory<1>_out
l111 top|full_adder_nbit(55)|d_ff(57)|n9
l112 top|full_adder_nbit(55)|d_ff(57)|memory<0>_out
l113 top|full_adder_nbit(55)|d_ff(57)|memory<1>_out
l114 top|full_adder_nbit(58)|d_ff(59)|n9
l115 top|full_adder_nbit(58)|d_ff(59)|memory<0>_out
l116 top|full_adder_nbit(58)|d_ff(59)|memory<1>_out
l117 top|full_adder_nbit(58)|d_ff(60)|n9
l118 top|full_adder_nbit(58)|d_ff(60)|memory<0>_out
l119 top|full_adder_nbit(58)|d_ff(60)|memory<1>_out
l120 top|full_adder_nbit(61)|d_ff(62)|n9
l121 top|full_adder_nbit(61)|d_ff(62)|memory<0>_out
l122 top|full_adder_nbit(61)|d_ff(62)|memory<1>_out
l123 top|full_adder_nbit(61)|d_ff(63)|n9
l124 top|full_adder_nbit(61)|d_ff(63)|memory<0>_out
l125 top|full_adder_nbit(61)|d_ff(63)|memory<1>_out
l126 top|full_adder_nbit(64)|d_ff(65)|n9
l127 top|full_adder_nbit(64)|d_ff(65)|memory<0>_out
l128 top|full_adder_nbit(64)|d_ff(65)|memory<1>_out
l129 top|full_adder_nbit(64)|d_ff(66)|n9
l130 top|full_adder_nbit(64)|d_ff(66)|memory<0>_out
l131 top|full_adder_nbit(64)|d_ff(66)|memory<1>_out
l132 top|full_adder_nbit(67)|d_ff(68)|n9
l133 top|full_adder_nbit(67)|d_ff(68)|memory<0>_out
l134 top|full_adder_nbit(67)|d_ff(68)|memory<1>_out
l135 top|full_adder_nbit(67)|d_ff(69)|n9
l136 top|full_adder_nbit(67)|d_ff(69)|memory<0>_out
l137 top|full_adder_nbit(67)|d_ff(69)|memory<1>_out
l138 top|full_adder_nbit(70)|d_ff(71)|n9
l139 top|full_adder_nbit(70)|d_ff(71)|memory<0>_out
l140 top|full_adder_nbit(70)|d_ff(71)|memory<1>_out
l141 top|full_adder_nbit(70)|d_ff(72)|n9
l142 top|full_adder_nbit(70)|d_ff(72)|memory<0>_out
l143 top|full_adder_nbit(70)|d_ff(72)|memory<1>_out
l144 top|full_adder_nbit(73)|d_ff(74)|n9
l145 top|full_adder_nbit(73)|d_ff(74)|memory<0>_out
l146 top|full_adder_nbit(73)|d_ff(74)|memory<1>_out
l147 top|full_adder_nbit(73)|d_ff(75)|n9
l148 top|full_adder_nbit(73)|d_ff(75)|memory<0>_out
l149 top|full_adder_nbit(73)|d_ff(75)|memory<1>_out
l150 top|full_adder_nbit(76)|d_ff(77)|n9
l151 top|full_adder_nbit(76)|d_ff(77)|memory<0>_out
l152 top|full_adder_nbit(76)|d_ff(77)|memory<1>_out
l153 top|full_adder_nbit(76)|d_ff(78)|n9
l154 top|full_adder_nbit(76)|d_ff(78)|memory<0>_out
l155 top|full_adder_nbit(76)|d_ff(78)|memory<1>_out
l156 top|full_adder_nbit(79)|d_ff(80)|n9
l157 top|full_adder_nbit(79)|d_ff(80)|memory<0>_out
l158 top|full_adder_nbit(79)|d_ff(80)|memory<1>_out
l159 top|full_adder_nbit(79)|d_ff(81)|n9
l160 top|full_adder_nbit(79)|d_ff(81)|memory<0>_out
l161 top|full_adder_nbit(79)|d_ff(81)|memory<1>_out
l162 top|full_adder_nbit(82)|d_ff(83)|n9
l163 top|full_adder_nbit(82)|d_ff(83)|memory<0>_out
l164 top|full_adder_nbit(82)|d_ff(83)|memory<1>_out
l165 top|full_adder_nbit(82)|d_ff(84)|n9
l166 top|full_adder_nbit(82)|d_ff(84)|memory<0>_out
l167 top|full_adder_nbit(82)|d_ff(84)|memory<1>_out
l168 top|full_adder_nbit(85)|d_ff(86)|n9
l169 top|full_adder_nbit(85)|d_ff(86)|memory<0>_out
l170 top|full_adder_nbit(85)|d_ff(86)|memory<1>_out
l171 top|full_adder_nbit(85)|d_ff(87)|n9
l172 top|full_adder_nbit(85)|d_ff(87)|memory<0>_out
l173 top|full_adder_nbit(85)|d_ff(87)|memory<1>_out
l174 top|full_adder_nbit(88)|d_ff(89)|n9
l175 top|full_adder_nbit(88)|d_ff(89)|memory<0>_out
l176 top|full_adder_nbit(88)|d_ff(89)|memory<1>_out
l177 top|full_adder_nbit(88)|d_ff(90)|n9
l178 top|full_adder_nbit(88)|d_ff(90)|memory<0>_out
l179 top|full_adder_nbit(88)|d_ff(90)|memory<1>_out
o0 Err_out_Final
o1 sum<0>
o2 sum<1>
c
top 
This file was written by ABC on Sun Sep 18 21:00:46 2016
For information about AIGER format, refer to http://fmv.jku.at/aiger
The verilog file pipe_add_tmr_i2_l10.v has been converted using the following commands:
vl2mv pipe_add_tmr_i2_l10.v       # generates pipe_add_tmr_i2_l10.mv
abc -c "read_blif_mv pipe_add_tmr_i2_l10.mv; write_aiger -s pipe_add_tmr_i2_l10.aig"
pipe_add_tmr_i2_l10.v:
___________________________
// this file uses jinja templates for code generation, see http://jinja.pocoo.org
`define WORD_WIDTH 2  // the bit width of the input, adders, and output signals
`define LAYERS 10      // defines how often the adder is cascaded

module top(
    input_vector,   // the input vector, WORD_WIDTH broad
    sum,            // the final result, WORD_WIDTH broad
    clk,
    Err_out_Final   // the alarm output
    );
    
    input   clk;
    input   [`WORD_WIDTH-1:0] input_vector;
    output  [`WORD_WIDTH-1:0] sum;
    output  Err_out_Final;

    wire [`WORD_WIDTH-1:0] b_out_R1_0 = input_vector;
    wire [`WORD_WIDTH-1:0] result_R1_0 = input_vector;

    wire [`WORD_WIDTH-1:0] b_out_R2_0 = input_vector;
    wire [`WORD_WIDTH-1:0] result_R2_0 = input_vector;

    wire [`WORD_WIDTH-1:0] b_out_R3_0 = input_vector;
    wire [`WORD_WIDTH-1:0] result_R3_0 = input_vector;

    // -- begin unrolled code --
{% for idx in range(1,`LAYERS+1) %}
    wire [`WORD_WIDTH-1:0] b_out_R1_{{ idx }};
    wire [`WORD_WIDTH-1:0] result_R1_{{ idx }};
    full_adder_nbit adder_R1_{{idx}}(clk, result_R1_{{idx - 1}}, b_out_R1_{{idx - 1}}, result_R1_{{idx}}, b_out_R1_{{idx}});

    wire [`WORD_WIDTH-1:0] b_out_R2_{{ idx }};
    wire [`WORD_WIDTH-1:0] result_R2_{{ idx }};
    full_adder_nbit adder_R2_{{idx}}(clk, result_R2_{{idx - 1}}, b_out_R2_{{idx - 1}}, result_R2_{{idx}}, b_out_R2_{{idx}});

    wire [`WORD_WIDTH-1:0] b_out_R3_{{ idx }};
    wire [`WORD_WIDTH-1:0] result_R3_{{ idx }};
    full_adder_nbit adder_R3_{{idx}}(clk, result_R3_{{idx - 1}}, b_out_R3_{{idx - 1}}, result_R3_{{idx}}, b_out_R3_{{idx}});
{% endfor %}
    // -- end unrolled code --

    tmr tmr_module(result_R1_`LAYERS, result_R2_`LAYERS, result_R3_`LAYERS, sum);

    //assign Err_out_Final = 0;


endmodule // top module


module full_adder_nbit(
    clk,
    in_a,
    in_b,
    sum,
    out_b
    );
    
    input   [`WORD_WIDTH-1:0] in_a;
    input   [`WORD_WIDTH-1:0] in_b;
    input clk;
    output [`WORD_WIDTH-1:0] sum;
    output [`WORD_WIDTH-1:0] out_b;
    
    wire [`WORD_WIDTH-1:0] res; 
    assign res = in_a + in_b;

    d_ff result(clk, res, sum);
    d_ff input_delay(clk, in_b, out_b);

endmodule // full_adder_nbit

module d_ff(clk, in, out);
    input clk;
    input  [`WORD_WIDTH-1:0] in;
    output [`WORD_WIDTH-1:0] out;

    reg [`WORD_WIDTH-1:0] memory;

    assign out = memory;

    initial begin
        memory = 1'b0;
    end

    always @(posedge clk) begin
        memory = in;
    end
endmodule // d_ff

module tmr(in_1, in_2, in_3, out);
    input  [`WORD_WIDTH-1:0] in_1;
    input  [`WORD_WIDTH-1:0] in_2;
    input  [`WORD_WIDTH-1:0] in_3;
    output [`WORD_WIDTH-1:0] out;

    assign out = (in_1 & in_2) | (in_2 & in_3) | (in_1 & in_3);
    
endmodule


