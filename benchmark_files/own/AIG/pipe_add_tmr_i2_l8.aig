aig 732 2 144 3 586
1
0
331
1
2
4
1
0
331
1
2
4
1
0
331
1
2
4
1
349
385
1
340
360
1
403
439
1
394
414
1
457
493
1
448
468
1
511
547
1
502
522
1
565
601
1
556
576
1
619
655
1
610
630
1
673
709
1
664
684
1
727
763
1
718
738
1
781
817
1
772
792
1
835
871
1
826
846
1
889
925
1
880
900
1
943
979
1
934
954
1
997
1033
1
988
1008
1
1051
1087
1
1042
1062
1
1105
1141
1
1096
1116
1
1159
1195
1
1150
1170
1
1213
1249
1
1204
1224
1
1267
1303
1
1258
1278
1
1321
1357
1
1312
1332
1
1375
1411
1
1366
1386
1
1429
1465
1
1420
1440
0
309
325
"0&¡ƒ√∆«√∆«	
’ÿ€’ÿ€	ÌÒÌÒ	
ˇÇÖˇÇÖ	óöõóöõ	
©¨Ø©¨Ø	¡ƒ≈¡ƒ≈	
”÷Ÿ”÷Ÿ	ÎÓÔÎÓÔ	
˝ÄÉ˝ÄÉ	ïòôïòô	
ß™≠ß™≠	ø¬√ø¬√	
—‘◊—‘◊	ÈÏÌÈÏÌ	
˚˛Å˚˛Å	ìñóìñó	
•®´•®´	Ω¿¡Ω¿¡	
œ“’œ“’	ÁÍÎÁÍÎ	
˘¸ˇ˘¸ˇ	ëîïëîï	
£¶©£¶©	ªæøªæø	
Õ–”Õ–”	ÂËÈÂËÈ	
˜˙˝˜˙˝	èíìèíì	
°§ß°§ß	πºΩπºΩ	
ÀŒ—ÀŒ—	„ÊÁ„ÊÁ	
ı¯˚ı¯˚	çêëçêë	
ü¢•ü¢•	∑∫ª∑∫ª	
…Ãœ…Ãœ	·‰Â·‰Â	
Ûˆ˘Ûˆ˘	ã	é	è	ã	é	è		
ù	†	£	ù	†	£		i0 input_vector<0>
i1 input_vector<1>
l0 top|full_adder_nbit(1)|d_ff(2)|n9
l1 top|full_adder_nbit(1)|d_ff(2)|memory<0>_out
l2 top|full_adder_nbit(1)|d_ff(2)|memory<1>_out
l3 top|full_adder_nbit(1)|d_ff(3)|n9
l4 top|full_adder_nbit(1)|d_ff(3)|memory<0>_out
l5 top|full_adder_nbit(1)|d_ff(3)|memory<1>_out
l6 top|full_adder_nbit(4)|d_ff(5)|n9
l7 top|full_adder_nbit(4)|d_ff(5)|memory<0>_out
l8 top|full_adder_nbit(4)|d_ff(5)|memory<1>_out
l9 top|full_adder_nbit(4)|d_ff(6)|n9
l10 top|full_adder_nbit(4)|d_ff(6)|memory<0>_out
l11 top|full_adder_nbit(4)|d_ff(6)|memory<1>_out
l12 top|full_adder_nbit(7)|d_ff(8)|n9
l13 top|full_adder_nbit(7)|d_ff(8)|memory<0>_out
l14 top|full_adder_nbit(7)|d_ff(8)|memory<1>_out
l15 top|full_adder_nbit(7)|d_ff(9)|n9
l16 top|full_adder_nbit(7)|d_ff(9)|memory<0>_out
l17 top|full_adder_nbit(7)|d_ff(9)|memory<1>_out
l18 top|full_adder_nbit(10)|d_ff(11)|n9
l19 top|full_adder_nbit(10)|d_ff(11)|memory<0>_out
l20 top|full_adder_nbit(10)|d_ff(11)|memory<1>_out
l21 top|full_adder_nbit(10)|d_ff(12)|n9
l22 top|full_adder_nbit(10)|d_ff(12)|memory<0>_out
l23 top|full_adder_nbit(10)|d_ff(12)|memory<1>_out
l24 top|full_adder_nbit(13)|d_ff(14)|n9
l25 top|full_adder_nbit(13)|d_ff(14)|memory<0>_out
l26 top|full_adder_nbit(13)|d_ff(14)|memory<1>_out
l27 top|full_adder_nbit(13)|d_ff(15)|n9
l28 top|full_adder_nbit(13)|d_ff(15)|memory<0>_out
l29 top|full_adder_nbit(13)|d_ff(15)|memory<1>_out
l30 top|full_adder_nbit(16)|d_ff(17)|n9
l31 top|full_adder_nbit(16)|d_ff(17)|memory<0>_out
l32 top|full_adder_nbit(16)|d_ff(17)|memory<1>_out
l33 top|full_adder_nbit(16)|d_ff(18)|n9
l34 top|full_adder_nbit(16)|d_ff(18)|memory<0>_out
l35 top|full_adder_nbit(16)|d_ff(18)|memory<1>_out
l36 top|full_adder_nbit(19)|d_ff(20)|n9
l37 top|full_adder_nbit(19)|d_ff(20)|memory<0>_out
l38 top|full_adder_nbit(19)|d_ff(20)|memory<1>_out
l39 top|full_adder_nbit(19)|d_ff(21)|n9
l40 top|full_adder_nbit(19)|d_ff(21)|memory<0>_out
l41 top|full_adder_nbit(19)|d_ff(21)|memory<1>_out
l42 top|full_adder_nbit(22)|d_ff(23)|n9
l43 top|full_adder_nbit(22)|d_ff(23)|memory<0>_out
l44 top|full_adder_nbit(22)|d_ff(23)|memory<1>_out
l45 top|full_adder_nbit(22)|d_ff(24)|n9
l46 top|full_adder_nbit(22)|d_ff(24)|memory<0>_out
l47 top|full_adder_nbit(22)|d_ff(24)|memory<1>_out
l48 top|full_adder_nbit(25)|d_ff(26)|n9
l49 top|full_adder_nbit(25)|d_ff(26)|memory<0>_out
l50 top|full_adder_nbit(25)|d_ff(26)|memory<1>_out
l51 top|full_adder_nbit(25)|d_ff(27)|n9
l52 top|full_adder_nbit(25)|d_ff(27)|memory<0>_out
l53 top|full_adder_nbit(25)|d_ff(27)|memory<1>_out
l54 top|full_adder_nbit(28)|d_ff(29)|n9
l55 top|full_adder_nbit(28)|d_ff(29)|memory<0>_out
l56 top|full_adder_nbit(28)|d_ff(29)|memory<1>_out
l57 top|full_adder_nbit(28)|d_ff(30)|n9
l58 top|full_adder_nbit(28)|d_ff(30)|memory<0>_out
l59 top|full_adder_nbit(28)|d_ff(30)|memory<1>_out
l60 top|full_adder_nbit(31)|d_ff(32)|n9
l61 top|full_adder_nbit(31)|d_ff(32)|memory<0>_out
l62 top|full_adder_nbit(31)|d_ff(32)|memory<1>_out
l63 top|full_adder_nbit(31)|d_ff(33)|n9
l64 top|full_adder_nbit(31)|d_ff(33)|memory<0>_out
l65 top|full_adder_nbit(31)|d_ff(33)|memory<1>_out
l66 top|full_adder_nbit(34)|d_ff(35)|n9
l67 top|full_adder_nbit(34)|d_ff(35)|memory<0>_out
l68 top|full_adder_nbit(34)|d_ff(35)|memory<1>_out
l69 top|full_adder_nbit(34)|d_ff(36)|n9
l70 top|full_adder_nbit(34)|d_ff(36)|memory<0>_out
l71 top|full_adder_nbit(34)|d_ff(36)|memory<1>_out
l72 top|full_adder_nbit(37)|d_ff(38)|n9
l73 top|full_adder_nbit(37)|d_ff(38)|memory<0>_out
l74 top|full_adder_nbit(37)|d_ff(38)|memory<1>_out
l75 top|full_adder_nbit(37)|d_ff(39)|n9
l76 top|full_adder_nbit(37)|d_ff(39)|memory<0>_out
l77 top|full_adder_nbit(37)|d_ff(39)|memory<1>_out
l78 top|full_adder_nbit(40)|d_ff(41)|n9
l79 top|full_adder_nbit(40)|d_ff(41)|memory<0>_out
l80 top|full_adder_nbit(40)|d_ff(41)|memory<1>_out
l81 top|full_adder_nbit(40)|d_ff(42)|n9
l82 top|full_adder_nbit(40)|d_ff(42)|memory<0>_out
l83 top|full_adder_nbit(40)|d_ff(42)|memory<1>_out
l84 top|full_adder_nbit(43)|d_ff(44)|n9
l85 top|full_adder_nbit(43)|d_ff(44)|memory<0>_out
l86 top|full_adder_nbit(43)|d_ff(44)|memory<1>_out
l87 top|full_adder_nbit(43)|d_ff(45)|n9
l88 top|full_adder_nbit(43)|d_ff(45)|memory<0>_out
l89 top|full_adder_nbit(43)|d_ff(45)|memory<1>_out
l90 top|full_adder_nbit(46)|d_ff(47)|n9
l91 top|full_adder_nbit(46)|d_ff(47)|memory<0>_out
l92 top|full_adder_nbit(46)|d_ff(47)|memory<1>_out
l93 top|full_adder_nbit(46)|d_ff(48)|n9
l94 top|full_adder_nbit(46)|d_ff(48)|memory<0>_out
l95 top|full_adder_nbit(46)|d_ff(48)|memory<1>_out
l96 top|full_adder_nbit(49)|d_ff(50)|n9
l97 top|full_adder_nbit(49)|d_ff(50)|memory<0>_out
l98 top|full_adder_nbit(49)|d_ff(50)|memory<1>_out
l99 top|full_adder_nbit(49)|d_ff(51)|n9
l100 top|full_adder_nbit(49)|d_ff(51)|memory<0>_out
l101 top|full_adder_nbit(49)|d_ff(51)|memory<1>_out
l102 top|full_adder_nbit(52)|d_ff(53)|n9
l103 top|full_adder_nbit(52)|d_ff(53)|memory<0>_out
l104 top|full_adder_nbit(52)|d_ff(53)|memory<1>_out
l105 top|full_adder_nbit(52)|d_ff(54)|n9
l106 top|full_adder_nbit(52)|d_ff(54)|memory<0>_out
l107 top|full_adder_nbit(52)|d_ff(54)|memory<1>_out
l108 top|full_adder_nbit(55)|d_ff(56)|n9
l109 top|full_adder_nbit(55)|d_ff(56)|memory<0>_out
l110 top|full_adder_nbit(55)|d_ff(56)|memory<1>_out
l111 top|full_adder_nbit(55)|d_ff(57)|n9
l112 top|full_adder_nbit(55)|d_ff(57)|memory<0>_out
l113 top|full_adder_nbit(55)|d_ff(57)|memory<1>_out
l114 top|full_adder_nbit(58)|d_ff(59)|n9
l115 top|full_adder_nbit(58)|d_ff(59)|memory<0>_out
l116 top|full_adder_nbit(58)|d_ff(59)|memory<1>_out
l117 top|full_adder_nbit(58)|d_ff(60)|n9
l118 top|full_adder_nbit(58)|d_ff(60)|memory<0>_out
l119 top|full_adder_nbit(58)|d_ff(60)|memory<1>_out
l120 top|full_adder_nbit(61)|d_ff(62)|n9
l121 top|full_adder_nbit(61)|d_ff(62)|memory<0>_out
l122 top|full_adder_nbit(61)|d_ff(62)|memory<1>_out
l123 top|full_adder_nbit(61)|d_ff(63)|n9
l124 top|full_adder_nbit(61)|d_ff(63)|memory<0>_out
l125 top|full_adder_nbit(61)|d_ff(63)|memory<1>_out
l126 top|full_adder_nbit(64)|d_ff(65)|n9
l127 top|full_adder_nbit(64)|d_ff(65)|memory<0>_out
l128 top|full_adder_nbit(64)|d_ff(65)|memory<1>_out
l129 top|full_adder_nbit(64)|d_ff(66)|n9
l130 top|full_adder_nbit(64)|d_ff(66)|memory<0>_out
l131 top|full_adder_nbit(64)|d_ff(66)|memory<1>_out
l132 top|full_adder_nbit(67)|d_ff(68)|n9
l133 top|full_adder_nbit(67)|d_ff(68)|memory<0>_out
l134 top|full_adder_nbit(67)|d_ff(68)|memory<1>_out
l135 top|full_adder_nbit(67)|d_ff(69)|n9
l136 top|full_adder_nbit(67)|d_ff(69)|memory<0>_out
l137 top|full_adder_nbit(67)|d_ff(69)|memory<1>_out
l138 top|full_adder_nbit(70)|d_ff(71)|n9
l139 top|full_adder_nbit(70)|d_ff(71)|memory<0>_out
l140 top|full_adder_nbit(70)|d_ff(71)|memory<1>_out
l141 top|full_adder_nbit(70)|d_ff(72)|n9
l142 top|full_adder_nbit(70)|d_ff(72)|memory<0>_out
l143 top|full_adder_nbit(70)|d_ff(72)|memory<1>_out
o0 Err_out_Final
o1 sum<0>
o2 sum<1>
c
top 
This file was written by ABC on Sun Sep 18 21:00:46 2016
For information about AIGER format, refer to http://fmv.jku.at/aiger
The verilog file pipe_add_tmr_i2_l8.v has been converted using the following commands:
vl2mv pipe_add_tmr_i2_l8.v       # generates pipe_add_tmr_i2_l8.mv
abc -c "read_blif_mv pipe_add_tmr_i2_l8.mv; write_aiger -s pipe_add_tmr_i2_l8.aig"
pipe_add_tmr_i2_l8.v:
___________________________
// this file uses jinja templates for code generation, see http://jinja.pocoo.org
`define WORD_WIDTH 2  // the bit width of the input, adders, and output signals
`define LAYERS 8      // defines how often the adder is cascaded

module top(
    input_vector,   // the input vector, WORD_WIDTH broad
    sum,            // the final result, WORD_WIDTH broad
    clk,
    Err_out_Final   // the alarm output
    );
    
    input   clk;
    input   [`WORD_WIDTH-1:0] input_vector;
    output  [`WORD_WIDTH-1:0] sum;
    output  Err_out_Final;

    wire [`WORD_WIDTH-1:0] b_out_R1_0 = input_vector;
    wire [`WORD_WIDTH-1:0] result_R1_0 = input_vector;

    wire [`WORD_WIDTH-1:0] b_out_R2_0 = input_vector;
    wire [`WORD_WIDTH-1:0] result_R2_0 = input_vector;

    wire [`WORD_WIDTH-1:0] b_out_R3_0 = input_vector;
    wire [`WORD_WIDTH-1:0] result_R3_0 = input_vector;

    // -- begin unrolled code --
{% for idx in range(1,`LAYERS+1) %}
    wire [`WORD_WIDTH-1:0] b_out_R1_{{ idx }};
    wire [`WORD_WIDTH-1:0] result_R1_{{ idx }};
    full_adder_nbit adder_R1_{{idx}}(clk, result_R1_{{idx - 1}}, b_out_R1_{{idx - 1}}, result_R1_{{idx}}, b_out_R1_{{idx}});

    wire [`WORD_WIDTH-1:0] b_out_R2_{{ idx }};
    wire [`WORD_WIDTH-1:0] result_R2_{{ idx }};
    full_adder_nbit adder_R2_{{idx}}(clk, result_R2_{{idx - 1}}, b_out_R2_{{idx - 1}}, result_R2_{{idx}}, b_out_R2_{{idx}});

    wire [`WORD_WIDTH-1:0] b_out_R3_{{ idx }};
    wire [`WORD_WIDTH-1:0] result_R3_{{ idx }};
    full_adder_nbit adder_R3_{{idx}}(clk, result_R3_{{idx - 1}}, b_out_R3_{{idx - 1}}, result_R3_{{idx}}, b_out_R3_{{idx}});
{% endfor %}
    // -- end unrolled code --

    tmr tmr_module(result_R1_`LAYERS, result_R2_`LAYERS, result_R3_`LAYERS, sum);

    //assign Err_out_Final = 0;


endmodule // top module


module full_adder_nbit(
    clk,
    in_a,
    in_b,
    sum,
    out_b
    );
    
    input   [`WORD_WIDTH-1:0] in_a;
    input   [`WORD_WIDTH-1:0] in_b;
    input clk;
    output [`WORD_WIDTH-1:0] sum;
    output [`WORD_WIDTH-1:0] out_b;
    
    wire [`WORD_WIDTH-1:0] res; 
    assign res = in_a + in_b;

    d_ff result(clk, res, sum);
    d_ff input_delay(clk, in_b, out_b);

endmodule // full_adder_nbit

module d_ff(clk, in, out);
    input clk;
    input  [`WORD_WIDTH-1:0] in;
    output [`WORD_WIDTH-1:0] out;

    reg [`WORD_WIDTH-1:0] memory;

    assign out = memory;

    initial begin
        memory = 1'b0;
    end

    always @(posedge clk) begin
        memory = in;
    end
endmodule // d_ff

module tmr(in_1, in_2, in_3, out);
    input  [`WORD_WIDTH-1:0] in_1;
    input  [`WORD_WIDTH-1:0] in_2;
    input  [`WORD_WIDTH-1:0] in_3;
    output [`WORD_WIDTH-1:0] out;

    assign out = (in_1 & in_2) | (in_2 & in_3) | (in_1 & in_3);
    
endmodule


